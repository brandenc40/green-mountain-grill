// Code generated by "enumer -type=FireState -json -sql"; DO NOT EDIT.

//
package client

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_FireStateName_0 = "FireStateDefaultFireStateOffFireStateStartupFireStateRunningFireStateCoolDownFireStateFail"
	_FireStateName_1 = "FireStateColdSmoke"
)

var (
	_FireStateIndex_0 = [...]uint8{0, 16, 28, 44, 60, 77, 90}
	_FireStateIndex_1 = [...]uint8{0, 18}
)

func (i FireState) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _FireStateName_0[_FireStateIndex_0[i]:_FireStateIndex_0[i+1]]
	case i == 198:
		return _FireStateName_1
	default:
		return fmt.Sprintf("FireState(%d)", i)
	}
}

var _FireStateValues = []FireState{0, 1, 2, 3, 4, 5, 198}

var _FireStateNameToValueMap = map[string]FireState{
	_FireStateName_0[0:16]:  0,
	_FireStateName_0[16:28]: 1,
	_FireStateName_0[28:44]: 2,
	_FireStateName_0[44:60]: 3,
	_FireStateName_0[60:77]: 4,
	_FireStateName_0[77:90]: 5,
	_FireStateName_1[0:18]:  198,
}

// FireStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FireStateString(s string) (FireState, error) {
	if val, ok := _FireStateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FireState values", s)
}

// FireStateValues returns all values of the enum
func FireStateValues() []FireState {
	return _FireStateValues
}

// IsAFireState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FireState) IsAFireState() bool {
	for _, v := range _FireStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FireState
func (i FireState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FireState
func (i *FireState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FireState should be a string, got %s", data)
	}

	var err error
	*i, err = FireStateString(s)
	return err
}

func (i FireState) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *FireState) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := FireStateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
