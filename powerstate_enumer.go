// Code generated by "enumer -type=PowerState -json -sql"; DO NOT EDIT.

//
package gmg

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _PowerStateName = "PowerStateOffPowerStateOnPowerStateFanPowerStateColdSmoke"

var _PowerStateIndex = [...]uint8{0, 13, 25, 38, 57}

func (i PowerState) String() string {
	if i < 0 || i >= PowerState(len(_PowerStateIndex)-1) {
		return fmt.Sprintf("PowerState(%d)", i)
	}
	return _PowerStateName[_PowerStateIndex[i]:_PowerStateIndex[i+1]]
}

var _PowerStateValues = []PowerState{0, 1, 2, 3}

var _PowerStateNameToValueMap = map[string]PowerState{
	_PowerStateName[0:13]:  0,
	_PowerStateName[13:25]: 1,
	_PowerStateName[25:38]: 2,
	_PowerStateName[38:57]: 3,
}

// PowerStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PowerStateString(s string) (PowerState, error) {
	if val, ok := _PowerStateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PowerState values", s)
}

// PowerStateValues returns all values of the enum
func PowerStateValues() []PowerState {
	return _PowerStateValues
}

// IsAPowerState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PowerState) IsAPowerState() bool {
	for _, v := range _PowerStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PowerState
func (i PowerState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PowerState
func (i *PowerState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PowerState should be a string, got %s", data)
	}

	var err error
	*i, err = PowerStateString(s)
	return err
}

func (i PowerState) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *PowerState) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := PowerStateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
