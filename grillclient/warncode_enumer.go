// Code generated by "enumer -type=WarnCode -json -sql"; DO NOT EDIT.

//
package grillclient

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_WarnCodeName_0 = "WarnCodeNone"
	_WarnCodeName_1 = "WarnCodeLowPellet"
)

var (
	_WarnCodeIndex_0 = [...]uint8{0, 12}
	_WarnCodeIndex_1 = [...]uint8{0, 17}
)

func (i WarnCode) String() string {
	switch {
	case i == 0:
		return _WarnCodeName_0
	case i == 128:
		return _WarnCodeName_1
	default:
		return fmt.Sprintf("WarnCode(%d)", i)
	}
}

var _WarnCodeValues = []WarnCode{0, 128}

var _WarnCodeNameToValueMap = map[string]WarnCode{
	_WarnCodeName_0[0:12]: 0,
	_WarnCodeName_1[0:17]: 128,
}

// WarnCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WarnCodeString(s string) (WarnCode, error) {
	if val, ok := _WarnCodeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to WarnCode values", s)
}

// WarnCodeValues returns all values of the enum
func WarnCodeValues() []WarnCode {
	return _WarnCodeValues
}

// IsAWarnCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i WarnCode) IsAWarnCode() bool {
	for _, v := range _WarnCodeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for WarnCode
func (i WarnCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for WarnCode
func (i *WarnCode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("WarnCode should be a string, got %s", data)
	}

	var err error
	*i, err = WarnCodeString(s)
	return err
}

func (i WarnCode) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *WarnCode) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := WarnCodeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
