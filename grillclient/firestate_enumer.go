// Code generated by "enumer -type=FireState -json -sql"; DO NOT EDIT.

//
package grillclient

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _FireStateName = "FireStateDefaultFireStateOffFireStateStartupFireStateRunningFireStateCoolDownFireStateFail"

var _FireStateIndex = [...]uint8{0, 16, 28, 44, 60, 77, 90}

func (i FireState) String() string {
	if i < 0 || i >= FireState(len(_FireStateIndex)-1) {
		return fmt.Sprintf("FireState(%d)", i)
	}
	return _FireStateName[_FireStateIndex[i]:_FireStateIndex[i+1]]
}

var _FireStateValues = []FireState{0, 1, 2, 3, 4, 5}

var _FireStateNameToValueMap = map[string]FireState{
	_FireStateName[0:16]:  0,
	_FireStateName[16:28]: 1,
	_FireStateName[28:44]: 2,
	_FireStateName[44:60]: 3,
	_FireStateName[60:77]: 4,
	_FireStateName[77:90]: 5,
}

// FireStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FireStateString(s string) (FireState, error) {
	if val, ok := _FireStateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FireState values", s)
}

// FireStateValues returns all values of the enum
func FireStateValues() []FireState {
	return _FireStateValues
}

// IsAFireState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FireState) IsAFireState() bool {
	for _, v := range _FireStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FireState
func (i FireState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FireState
func (i *FireState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FireState should be a string, got %s", data)
	}

	var err error
	*i, err = FireStateString(s)
	return err
}

func (i FireState) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *FireState) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := FireStateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
